// ===========================================
// SISTEMA DE DIAGN√ìSTICO
// ===========================================

class DiagnosticForm {
    constructor() {
        this.currentQuestion = 1;
        this.totalQuestions = 10;
        this.answers = {};
        this.diagnosticoData = null;
        this.init();
    }

    async init() {
        await this.loadDiagnosticoData();
        this.updateProgress();
        this.bindEvents();
    }

    async loadDiagnosticoData() {
        try {
            const response = await fetch('JS/diagnostico-data.json');
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            this.diagnosticoData = await response.json();
            console.log('Datos de diagn√≥stico cargados exitosamente:', this.diagnosticoData);
        } catch (error) {
            console.error('Error cargando datos de diagn√≥stico:', error);
            // Crear datos de prueba si falla la carga
            this.diagnosticoData = {
                diagnostico_social: {
                    preguntas: [],
                    categorias_diagnostico: {},
                    niveles_vulnerabilidad: {
                        baja: { descripcion: "Baja vulnerabilidad", recomendaciones: ["Mantenimiento preventivo"] },
                        media: { descripcion: "Vulnerabilidad media", recomendaciones: ["Apoyo focalizado"] },
                        alta: { descripcion: "Alta vulnerabilidad", recomendaciones: ["Intervenci√≥n urgente"] },
                        critica: { descripcion: "Vulnerabilidad cr√≠tica", recomendaciones: ["Atenci√≥n de emergencia"] }
                    },
                    logica_diagnostico: {
                        escenarios_diagnostico: {}
                    }
                }
            };
            console.log('Usando datos de prueba');
        }
    }

    bindEvents() {
        const nextBtn = document.getElementById('nextBtn');
        const prevBtn = document.getElementById('prevBtn');
        const submitBtn = document.getElementById('submitBtn');

        if (nextBtn) nextBtn.addEventListener('click', () => this.nextQuestion());
        if (prevBtn) prevBtn.addEventListener('click', () => this.prevQuestion());
        if (submitBtn) submitBtn.addEventListener('click', (e) => this.submitForm(e));

        // Auto-save answers when option is selected
        document.querySelectorAll('.option-input').forEach(input => {
            console.log('Bindando evento para:', input.name, input.value, input.type);
            
            input.addEventListener('change', (e) => {
                console.log('Evento change disparado:', e.target.name, e.target.value);
                
                // Logging especial para pregunta 7
                if (e.target.name === 'q7') {
                    console.log('PREGUNTA 7 SELECCIONADA:', e.target.value);
                }
                
                this.saveAnswer(e.target.name, e.target.value);
                
                // Mostrar campo de texto para pregunta 6 si se selecciona "S√≠"
                if (e.target.name === 'q6' && e.target.value === 'si') {
                    const specifyDiv = document.getElementById('q6_specify');
                    if (specifyDiv) {
                        specifyDiv.style.display = 'block';
                    }
                } else if (e.target.name === 'q6' && e.target.value !== 'si') {
                    const specifyDiv = document.getElementById('q6_specify');
                    if (specifyDiv) {
                        specifyDiv.style.display = 'none';
                    }
                }
                
                // Guardar texto de "otro" para pregunta 9
                if (e.target.name === 'q9' && e.target.value === 'otro') {
                    const otherInput = document.querySelector('label[for="q9f"] input[type="text"]');
                    if (otherInput) {
                        // Guardar el valor actual del input
                        this.saveAnswer('q9_other_text', otherInput.value);
                    }
                }
            });
        });
        
        // Capturar texto mientras se escribe en el campo "otro" de pregunta 9
        const otherInput = document.querySelector('label[for="q9f"] input[type="text"]');
        if (otherInput) {
            otherInput.addEventListener('input', (e) => {
                console.log('Texto de "otro" cambiado:', e.target.value);
                this.saveAnswer('q9_other_text', e.target.value);
            });
        }
    }

    nextQuestion() {
        // Validar la pregunta actual antes de avanzar
        if (!this.validateCurrentQuestion()) {
            return; // No avanzar si la pregunta no est√° respondida
        }
        
        if (this.currentQuestion < this.totalQuestions) {
            this.currentQuestion++;
            this.showQuestion(this.currentQuestion);
            this.updateProgress();
            this.updateButtons();
        }
    }

    prevQuestion() {
        if (this.currentQuestion > 1) {
            this.currentQuestion--;
            this.showQuestion(this.currentQuestion);
            this.updateProgress();
            this.updateButtons();
        }
    }

    showQuestion(questionNumber) {
        // Hide all questions
        document.querySelectorAll('.question-slide').forEach(slide => {
            slide.classList.remove('active');
        });

        // Show current question
        const currentSlide = document.querySelector(`.question-slide:nth-child(${questionNumber})`);
        if (currentSlide) {
            currentSlide.classList.add('active');
        }
    }

    updateProgress() {
        const progressFill = document.getElementById('progressFill');
        const currentQuestionEl = document.getElementById('currentQuestion');
        const totalQuestionsEl = document.getElementById('totalQuestions');

        if (progressFill) {
            const progress = (this.currentQuestion / this.totalQuestions) * 100;
            progressFill.style.width = `${progress}%`;
        }

        if (currentQuestionEl) currentQuestionEl.textContent = this.currentQuestion;
        if (totalQuestionsEl) totalQuestionsEl.textContent = this.totalQuestions;
    }

    updateButtons() {
        const nextBtn = document.getElementById('nextBtn');
        const prevBtn = document.getElementById('prevBtn');
        const submitBtn = document.getElementById('submitBtn');

        // Update previous button
        if (prevBtn) prevBtn.disabled = this.currentQuestion === 1;

        // Update next/submit button
        if (this.currentQuestion === this.totalQuestions) {
            if (nextBtn) nextBtn.style.display = 'none';
            if (submitBtn) submitBtn.style.display = 'block';
        } else {
            if (nextBtn) nextBtn.style.display = 'block';
            if (submitBtn) submitBtn.style.display = 'none';
        }
    }

    saveAnswer(questionName, answer) {
        console.log('üîç Guardando respuesta:', questionName, answer);
        
        // Manejar checkboxes (m√∫ltiples respuestas)
        if (questionName === 'q2') {
            if (!this.answers[questionName]) {
                this.answers[questionName] = [];
            }
            
            if (Array.isArray(this.answers[questionName])) {
                if (this.answers[questionName].includes(answer)) {
                    // Remover si ya est√° seleccionado
                    this.answers[questionName] = this.answers[questionName].filter(a => a !== answer);
                    console.log(`  - Removido ${answer} de ${questionName}`);
                } else {
                    // Agregar si no est√° seleccionado
                    this.answers[questionName].push(answer);
                    console.log(`  - Agregado ${answer} a ${questionName}`);
                }
            }
        } else {
            // Para radio buttons, reemplazar la respuesta
            this.answers[questionName] = answer;
            console.log(`  - Respuesta ${questionName} establecida como: ${answer}`);
        }
        
        console.log('‚úÖ Respuesta guardada:', questionName, this.answers[questionName]);
        console.log('üìä Todas las respuestas actuales:', this.answers);
        
        // Verificar si todas las preguntas est√°n respondidas
        this.checkAllQuestionsAnswered();
    }
    
    checkAllQuestionsAnswered() {
        let answeredCount = 0;
        let totalQuestions = this.totalQuestions;
        
        for (let i = 1; i <= totalQuestions; i++) {
            const questionName = `q${i}`;
            const answer = this.answers[questionName];
            
            if (questionName === 'q2') {
                if (answer && Array.isArray(answer) && answer.length > 0) {
                    answeredCount++;
                }
            } else {
                if (answer && answer !== '') {
                    answeredCount++;
                }
            }
        }
        
        console.log(`Preguntas respondidas: ${answeredCount}/${totalQuestions}`);
        
        // Actualizar el bot√≥n de env√≠o si todas est√°n respondidas
        const submitBtn = document.getElementById('submitBtn');
        if (submitBtn) {
            if (answeredCount === totalQuestions) {
                submitBtn.disabled = false;
                submitBtn.textContent = 'Enviar Diagn√≥stico';
            } else {
                submitBtn.disabled = true;
                submitBtn.textContent = `Responder ${totalQuestions - answeredCount} preguntas m√°s`;
            }
        }
    }

    submitForm(e) {
        e.preventDefault();
        
        console.log('Enviando formulario...');
        
        // Verificar que todas las preguntas est√©n respondidas
        if (!this.validateAllAnswers()) {
            alert('Por favor responde todas las preguntas antes de continuar.');
            return;
        }

        console.log('Formulario v√°lido, procesando...');
        
        // Generar diagn√≥stico espec√≠fico basado en las respuestas
        const userName = localStorage.getItem('userName') || 'Usuario';
        console.log('üîç DEBUG - Respuestas del usuario al enviar:', this.answers);
        console.log('üîç DEBUG - Datos de diagn√≥stico disponibles:', this.diagnosticoData);
        const diagnosis = this.generateSpecificDiagnosisText();
        
        // Calcular categor√≠as basadas en las respuestas reales
        const categories = this.calculateCategoriesFromAnswers();
        console.log('‚úÖ Usando datos reales calculados:', categories);
        
        // Calcular puntuaci√≥n general basada en las respuestas reales
        const generalScore = this.calculateGeneralScore();
        console.log('‚úÖ Puntuaci√≥n general calculada:', generalScore);
        
        // Generar an√°lisis detallado y nivel de vulnerabilidad de forma segura
        let analysis, vulnerabilityLevel, recommendations, specificDiagnosis;
        
        try {
            analysis = this.generateDetailedAnalysis();
            vulnerabilityLevel = this.getVulnerabilityLevel(generalScore);
            recommendations = this.generateSpecificRecommendations(analysis, vulnerabilityLevel.nombre);
            specificDiagnosis = this.generateSpecificDiagnosis();
        } catch (error) {
            console.error('Error generando an√°lisis:', error);
            // Respaldo robusto: usar recomendaciones extensas basadas en respuestas
            analysis = { specificRecommendations: [] };
            vulnerabilityLevel = { nombre: 'media' };
            recommendations = this.generateFallbackRecommendations();
            specificDiagnosis = { escenario: 'Diagn√≥stico Social Completado', descripcion: 'An√°lisis basado en tus respuestas' };
        }
        
        // Guardar resultados
        const results = {
            date: new Date().toISOString(),
            generalScore: generalScore, // Usar puntuaci√≥n real calculada
            categories: categories, // Usar datos reales calculados
            recommendations: recommendations,
            diagnosis: specificDiagnosis,
            aiDiagnosis: diagnosis,
            answers: this.answers,
            userName: userName
        };
        
        console.log('üîç DEBUG - Guardando resultados:', results);
        console.log('üîç DEBUG - Categor√≠as calculadas:', categories);
        localStorage.setItem('diagnosticResults', JSON.stringify(results));
        
        // Tambi√©n agregar la ejecuci√≥n al historial del perfil (solo si no existe ya)
        try {
            const history = JSON.parse(localStorage.getItem('diagnosticHistory') || '[]');
            
            // Verificar si ya existe un diagn√≥stico con la misma fecha y puntuaci√≥n
            const exists = history.some(item => {
                const itemDate = new Date(item.date);
                const resultsDate = new Date(results.date);
                
                // Comparar fechas hasta el minuto para ser menos estricto con los milisegundos
                const sameDateMinute = itemDate.getFullYear() === resultsDate.getFullYear() &&
                                       itemDate.getMonth() === resultsDate.getMonth() &&
                                       itemDate.getDate() === resultsDate.getDate() &&
                                       itemDate.getHours() === resultsDate.getHours() &&
                                       itemDate.getMinutes() === resultsDate.getMinutes();
                
                // Comparar tambi√©n el score, categor√≠as y recomendaciones para una verificaci√≥n m√°s robusta
                return sameDateMinute &&
                       item.generalScore === results.generalScore &&
                       JSON.stringify(item.categories) === JSON.stringify(results.categories) &&
                       JSON.stringify(item.recommendations) === JSON.stringify(results.recommendations);
            });
            
            if (!exists) {
                const historyEntry = {
                    date: results.date,
                    generalScore: results.generalScore,
                    categories: results.categories,
                    recommendations: results.recommendations,
                    diagnosis: results.diagnosis
                };
                history.push(historyEntry);
                localStorage.setItem('diagnosticHistory', JSON.stringify(history));
            }

            // Actualizar resumen para panel de administrador (no afecta UI)
            try {
                const adminUsers = JSON.parse(localStorage.getItem('adminUsers') || '[]');
                const currentUserName = localStorage.getItem('userName') || localStorage.getItem('username') || 'Usuario';
                const userEmail = localStorage.getItem('userEmail') || '';
                const existingIdx = adminUsers.findIndex(u => u.username === currentUserName && u.userEmail === userEmail);
                const summaryEntry = {
                    date: results.date,
                    generalScore: results.generalScore,
                    diagnosisTitle: results?.diagnosis?.escenario || results?.diagnosis?.diagnostico || 'Diagn√≥stico',
                };
                if (existingIdx >= 0) {
                    adminUsers[existingIdx].diagnostics = adminUsers[existingIdx].diagnostics || [];
                    adminUsers[existingIdx].diagnostics.push(summaryEntry);
                    adminUsers[existingIdx].lastDate = results.date;
                } else {
                    adminUsers.push({
                        username: currentUserName,
                        userEmail: userEmail,
                        registeredAt: localStorage.getItem('registeredAt') || new Date().toISOString(),
                        lastDate: results.date,
                        diagnostics: [summaryEntry]
                    });
                }
                localStorage.setItem('adminUsers', JSON.stringify(adminUsers));
            } catch (e) {
                console.warn('No se pudo actualizar adminUsers:', e);
            }
        } catch (err) {
            console.error('Error actualizando el historial de diagn√≥sticos:', err);
        }
        
        alert('¬°Diagn√≥stico completado! Redirigiendo a resultados...');
        
        // Redirigir
            window.location.href = 'resultados.html';
    }

    validateCurrentQuestion() {
        const questionNumber = this.currentQuestion;
        const questionName = `q${questionNumber}`;
        const answer = this.answers[questionName];
        
        console.log(`Validando pregunta actual ${questionNumber} (${questionName}):`, answer);
        
        // Para pregunta 2 (checkboxes), verificar que al menos una opci√≥n est√© seleccionada
        if (questionName === 'q2') {
            if (!answer || !Array.isArray(answer) || answer.length === 0) {
                console.log(`Pregunta ${questionNumber} no respondida (checkboxes vac√≠as)`);
                alert(`Por favor responde la pregunta ${questionNumber} antes de continuar.`);
                return false;
            }
        } else if (questionName === 'q6') {
            // Para pregunta 6, verificar que haya una respuesta y si es "si", verificar el texto
            if (!answer || answer === '') {
                console.log(`Pregunta ${questionNumber} no respondida (radio button vac√≠o)`);
                alert(`Por favor responde la pregunta ${questionNumber} antes de continuar.`);
                return false;
            }
            // Si respondi√≥ "si", verificar que haya especificado
            if (answer === 'si') {
                const specifyInput = document.querySelector('input[name="q6_specify"]');
                if (specifyInput && (!specifyInput.value || specifyInput.value.trim() === '')) {
                    console.log(`Pregunta ${questionNumber} especificaci√≥n vac√≠a`);
                    alert(`Por favor especifica tu respuesta en la pregunta ${questionNumber}.`);
                    return false;
                }
            }
        } else if (questionName === 'q9') {
            // Para pregunta 9, verificar que haya una respuesta y si es "otro", verificar el texto
            if (!answer || answer === '') {
                console.log(`Pregunta ${questionNumber} no respondida (radio button vac√≠o)`);
                alert(`Por favor responde la pregunta ${questionNumber} antes de continuar.`);
                return false;
            }
            // Si respondi√≥ "otro", verificar que haya especificado
            if (answer === 'otro') {
                const otherInput = document.querySelector('label[for="q9f"] input[type="text"]');
                if (otherInput && (!otherInput.value || otherInput.value.trim() === '')) {
                    console.log(`Pregunta ${questionNumber} especificaci√≥n de "otro" vac√≠a`);
                    alert(`Por favor especifica tu respuesta en la pregunta ${questionNumber}.`);
                    return false;
                }
            }
        } else {
            // Para radio buttons, verificar que haya una respuesta
            if (!answer || answer === '') {
                console.log(`Pregunta ${questionNumber} no respondida (radio button vac√≠o)`);
                alert(`Por favor responde la pregunta ${questionNumber} antes de continuar.`);
                return false;
            }
        }
        
        console.log(`Pregunta ${questionNumber} est√° respondida correctamente`);
        return true;
    }

    validateAllAnswers() {
        console.log('Validando respuestas:', this.answers);
        
        for (let i = 1; i <= this.totalQuestions; i++) {
            const questionName = `q${i}`;
            const answer = this.answers[questionName];
            
            console.log(`Validando pregunta ${i} (${questionName}):`, answer);
            
            // Para pregunta 2 (checkboxes), verificar que al menos una opci√≥n est√© seleccionada
            if (questionName === 'q2') {
                if (!answer || !Array.isArray(answer) || answer.length === 0) {
                    console.log(`Pregunta ${i} no respondida (checkboxes vac√≠as)`);
                    alert(`Por favor responde la pregunta ${i} antes de continuar.`);
                    return false;
                }
            } else if (questionName === 'q6') {
                // Para pregunta 6, verificar que haya una respuesta y si es "si", verificar el texto
                if (!answer || answer === '') {
                    console.log(`Pregunta ${i} no respondida (radio button vac√≠o)`);
                    alert(`Por favor responde la pregunta ${i} antes de continuar.`);
                    return false;
                }
                // Si respondi√≥ "si", verificar que haya especificado
                if (answer === 'si') {
                    const specifyInput = document.querySelector('input[name="q6_specify"]');
                    if (specifyInput && (!specifyInput.value || specifyInput.value.trim() === '')) {
                        console.log(`Pregunta ${i} especificaci√≥n vac√≠a`);
                        alert(`Por favor especifica tu respuesta en la pregunta ${i}.`);
                        return false;
                    }
                }
            } else if (questionName === 'q9') {
                // Para pregunta 9, verificar que haya una respuesta y si es "otro", verificar el texto
                if (!answer || answer === '') {
                    console.log(`Pregunta ${i} no respondida (radio button vac√≠o)`);
                    alert(`Por favor responde la pregunta ${i} antes de continuar.`);
                    return false;
                }
                // Si respondi√≥ "otro", verificar que haya especificado
                if (answer === 'otro') {
                    const otherInput = document.querySelector('label[for="q9f"] input[type="text"]');
                    if (otherInput && (!otherInput.value || otherInput.value.trim() === '')) {
                        console.log(`Pregunta ${i} especificaci√≥n de "otro" vac√≠a`);
                        alert(`Por favor especifica tu respuesta en la pregunta ${i}.`);
                        return false;
                    }
                }
            } else {
                // Para radio buttons, verificar que haya una respuesta
                if (!answer || answer === '') {
                    console.log(`Pregunta ${i} no respondida (radio button vac√≠o)`);
                    alert(`Por favor responde la pregunta ${i} antes de continuar.`);
                return false;
                }
            }
        }
        
        console.log('Todas las preguntas est√°n respondidas');
        return true;
    }

    // Calcular puntuaci√≥n general usando el nuevo sistema
    calculateGeneralScore() {
        if (!this.diagnosticoData || !this.diagnosticoData.preguntas) {
            console.log('No hay datos de diagn√≥stico, usando c√°lculo b√°sico');
            return this.calculateBasicScore();
        }
        
        let totalScore = 0;
        console.log('üîç Calculando puntuaci√≥n general con datos del JSON...');
        
        // Calcular puntos para cada pregunta usando los datos del JSON
        for (let i = 1; i <= this.totalQuestions; i++) {
            const questionId = `q${i}`;
            const answer = this.answers[questionId];
            if (answer) {
                const points = this.getPointsForAnswer(questionId, answer);
                console.log(`Pregunta ${i} (${questionId}): ${answer} = ${points} puntos`);
                totalScore += points;
            }
        }
        
        console.log('‚úÖ Puntuaci√≥n total calculada:', totalScore);
        return totalScore;
    }

    // Obtener puntos por respuesta usando el JSON
    getPointsForAnswer(questionId, answer) {
        if (!this.diagnosticoData || !this.diagnosticoData.preguntas) {
            console.log('No hay datos de diagn√≥stico disponibles para calcular puntos');
            return 0;
        }
        
        const question = this.diagnosticoData.preguntas.find(q => q.id === questionId);
        if (!question) {
            console.log(`No se encontr√≥ la pregunta ${questionId} en los datos`);
            return 0;
        }
        
        console.log(`Procesando pregunta ${questionId}, tipo: ${question.tipo}, respuesta:`, answer);
        
        if (question.tipo === 'checkbox') {
            // Para checkboxes, sumar puntos de todas las opciones seleccionadas
            let totalPoints = 0;
            if (Array.isArray(answer)) {
                answer.forEach(val => {
                    const option = question.opciones.find(opt => opt.valor === val);
                    if (option) {
                        totalPoints += option.puntos;
                        console.log(`  - Opci√≥n ${val}: ${option.puntos} puntos`);
                    }
                });
            }
            console.log(`  Total puntos para ${questionId}: ${totalPoints}`);
            return totalPoints;
        } else {
            // Para radio buttons, obtener puntos de la opci√≥n seleccionada
            const option = question.opciones.find(opt => opt.valor === answer);
            const points = option ? option.puntos : 0;
            console.log(`  Opci√≥n ${answer}: ${points} puntos`);
            return points;
        }
    }

    // Obtener datos de categor√≠as usando el nuevo sistema
    getCategoriesData() {
        if (!this.diagnosticoData) return {};
        
        const categories = {};
        
        // Calcular puntuaci√≥n por categor√≠a
        Object.keys(this.diagnosticoData.categorias).forEach(cat => {
            categories[cat] = this.calculateCategoryScore(cat);
        });
        
        return categories;
    }

    // Calcular puntuaci√≥n por categor√≠a
    calculateCategoryScore(category) {
        let score = 0;
        let count = 0;
        
        // Buscar preguntas que pertenecen a esta categor√≠a
        this.diagnosticoData.preguntas.forEach(question => {
            if (question.opciones) {
                question.opciones.forEach(option => {
                    if (option.categoria === category) {
                        // Verificar si esta opci√≥n fue seleccionada
                        const answer = this.answers[question.id];
                        
                        if (answer && (answer === option.valor || (Array.isArray(answer) && answer.includes(option.valor)))) {
                            score += option.puntos;
                            count++;
                        }
                    }
                });
            }
        });
        
        return count > 0 ? Math.round((score / count) * 20) : 0;
    }

    // Obtener ID de pregunta por tipo
    getQuestionIdByType(questionType) {
        const mapping = {
            'tipo_comunidad': 'q1',
            'problematicas_principales': 'q2',
            'afectacion_personal': 'q3',
            'situacion_laboral': 'q4',
            'ingresos_hogar': 'q5',
            'condicion_especial': 'q6',
            'acceso_salud': 'q7',
            'nivel_educativo': 'q8',
            'tipo_ayuda_necesaria': 'q9',
            'disposicion_participacion': 'q10'
        };
        return mapping[questionType];
    }

    // Generar diagn√≥stico espec√≠fico
    generateSpecificDiagnosis() {
        if (!this.diagnosticoData) {
            console.log('No hay datos de diagn√≥stico, generando diagn√≥stico b√°sico');
            return this.generateBasicDiagnosis();
        }
        
        const totalScore = this.calculateGeneralScore();
        console.log('Puntuaci√≥n total calculada:', totalScore);
        
        const scenarios = this.diagnosticoData.diagnostico_social.logica_diagnostico.escenarios_diagnostico;
        
        // Buscar escenario que coincida con las respuestas
        if (scenarios && typeof scenarios === 'object') {
            for (const [key, scenario] of Object.entries(scenarios)) {
                if (scenario && this.matchesScenario(scenario)) {
                    console.log('Escenario encontrado:', scenario.nombre);
                    return {
                        escenario: scenario.nombre,
                        diagnostico: scenario.diagnostico,
                        descripcion: scenario.descripcion,
                        prioridad: scenario.prioridad,
                        recomendaciones: scenario.recomendaciones_especificas,
                        seguimiento: scenario.seguimiento,
                        puntuacion: totalScore
                    };
                }
            }
        }
        
        // Si no hay escenario espec√≠fico, generar diagn√≥stico inteligente
        return this.generateIntelligentDiagnosis(totalScore);
    }

    // Generar diagn√≥stico inteligente basado en an√°lisis espec√≠fico
    generateIntelligentDiagnosis(totalScore) {
        const analysis = this.generateDetailedAnalysis();
        const categories = this.getCategoriesData();
        
        // Determinar nivel de vulnerabilidad
        let vulnerabilityLevel = 'baja';
        let priority = 'BAJA';
        let followUp = 'Mensual';
        
        if (totalScore >= 40) {
            vulnerabilityLevel = 'cr√≠tica';
            priority = 'CR√çTICA';
            followUp = 'Semanal';
        } else if (totalScore >= 30) {
            vulnerabilityLevel = 'alta';
            priority = 'ALTA';
            followUp = 'Quincenal';
        } else if (totalScore >= 20) {
            vulnerabilityLevel = 'media';
            priority = 'MEDIA';
            followUp = 'Mensual';
        }
        
        // Crear diagn√≥stico espec√≠fico
        const diagnosis = {
            escenario: `Vulnerabilidad Social ${vulnerabilityLevel.toUpperCase()}`,
            diagnostico: this.generateSpecificDiagnosticText(analysis, vulnerabilityLevel),
            descripcion: this.generateDetailedDescription(analysis, totalScore, categories),
            prioridad: priority,
            recomendaciones: this.generateSpecificRecommendations(analysis, vulnerabilityLevel),
            seguimiento: followUp,
            puntuacion: totalScore,
            categorias: categories
        };
        
        return diagnosis;
    }

    // Generar texto de diagn√≥stico espec√≠fico
    generateSpecificDiagnosticText(analysis, vulnerabilityLevel) {
        let diagnosticText = `Vulnerabilidad social ${vulnerabilityLevel}`;
        
        if (analysis.primaryIssue) {
            diagnosticText += ` con ${analysis.primaryIssue}`;
        }
        
        if (analysis.specificProblems.length > 0) {
            diagnosticText += `. Problem√°ticas identificadas: ${analysis.specificProblems.join(', ')}`;
        }
        
        return diagnosticText;
    }

    // Generar descripci√≥n detallada
    generateDetailedDescription(analysis, totalScore, categories) {
        let description = `Puntuaci√≥n total: ${totalScore}. `;
        
        if (analysis.economicImpact) {
            description += `Aspecto econ√≥mico: ${analysis.economicImpact}. `;
        }
        
        if (analysis.socialImpact) {
            description += `Aspecto social: ${analysis.socialImpact}. `;
        }
        
        if (analysis.educationalImpact) {
            description += `Aspecto educativo: ${analysis.educationalImpact}. `;
        }
        
        if (analysis.healthImpact) {
            description += `Aspecto de salud: ${analysis.healthImpact}. `;
        }
        
        // Agregar informaci√≥n de categor√≠as
        let categoryInfo = '';
        if (categories && typeof categories === 'object') {
            categoryInfo = Object.entries(categories)
                .filter(([cat, score]) => score > 0)
                .map(([cat, score]) => `${cat}: ${score}%`)
                .join(', ');
        }
        
        if (categoryInfo) {
            description += `An√°lisis por categor√≠as: ${categoryInfo}.`;
        }
        
        return description;
    }

    // Generar recomendaciones espec√≠ficas y realistas
    generateSpecificRecommendations(analysis, vulnerabilityLevel) {
        const recommendations = [];
        
        // Recomendaciones basadas en problem√°ticas espec√≠ficas identificadas
        if (analysis.specificProblems && analysis.specificProblems.length > 0) {
            analysis.specificProblems.forEach(problem => {
                const problemRecommendations = this.getRecommendationsForProblem(problem);
                recommendations.push(...problemRecommendations);
            });
        }
        
        // Recomendaciones basadas en vulnerabilidades econ√≥micas
        if (analysis.economicImpact) {
            recommendations.push(...this.getEconomicRecommendations(analysis.economicImpact));
        }
        
        // Recomendaciones basadas en vulnerabilidades sociales
        if (analysis.socialImpact) {
            recommendations.push(...this.getSocialRecommendations(analysis.socialImpact));
        }
        
        // Recomendaciones basadas en vulnerabilidades de salud
        if (analysis.healthImpact) {
            recommendations.push(...this.getHealthRecommendations(analysis.healthImpact));
        }
        
        // Recomendaciones basadas en vulnerabilidades educativas
        if (analysis.educationalImpact) {
            recommendations.push(...this.getEducationalRecommendations(analysis.educationalImpact));
        }
        
        // Recomendaciones seg√∫n nivel de vulnerabilidad
        const levelRecommendations = this.getLevelBasedRecommendations(vulnerabilityLevel);
        recommendations.push(...levelRecommendations);
        
        // Eliminar duplicados y limitar a 6 recomendaciones
        const uniqueRecommendations = [...new Set(recommendations)];
        return uniqueRecommendations.slice(0, 6);
    }

    // Recomendaciones espec√≠ficas por problem√°tica
    getRecommendationsForProblem(problem) {
        const problemRecommendations = {
            'Falta de empleo o ingresos estables': [
                'Inscr√≠bete en el Servicio P√∫blico de Empleo para acceder a ofertas laborales. Este servicio gratuito del gobierno conecta a las personas con empleadores y ofrece orientaci√≥n laboral personalizada, incluyendo talleres de hoja de vida y preparaci√≥n para entrevistas.',
                'Participa en programas de capacitaci√≥n t√©cnica del SENA. El SENA ofrece m√°s de 600 programas t√©cnicos gratuitos en √°reas como tecnolog√≠a, servicios, agroindustria y construcci√≥n. Los cursos incluyen pr√°ctica laboral y certificaci√≥n oficial que mejora significativamente las oportunidades de empleo.',
                'Explora oportunidades de emprendimiento con apoyo de C√°mara de Comercio. Las c√°maras ofrecen programas de incubaci√≥n de empresas, asesor√≠a legal y contable, acceso a microcr√©ditos y redes de contactos empresariales. Tambi√©n organizan ferias de emprendimiento y eventos de networking.',
                'Considera trabajos temporales mientras encuentras empleo estable. Los trabajos temporales en sectores como construcci√≥n, agricultura, servicios dom√©sticos o delivery pueden generar ingresos inmediatos y experiencia laboral. Muchas empresas usan estos trabajos como puerta de entrada para empleos permanentes.'
            ],
            'Inseguridad y violencia': [
                'Participa en programas de convivencia ciudadana de tu alcald√≠a. Estos programas incluyen talleres de resoluci√≥n pac√≠fica de conflictos, actividades deportivas y culturales para j√≥venes, y estrategias de prevenci√≥n del delito. La participaci√≥n activa fortalece los lazos comunitarios y reduce la violencia.',
                '√önete a redes vecinales de seguridad comunitaria. Las redes vecinales organizan patrullajes comunitarios, sistemas de alerta temprana, y actividades de vigilancia colaborativa. Tambi√©n facilitan la comunicaci√≥n con autoridades policiales y la denuncia de actividades sospechosas.',
                'Acude a la Comisar√≠a de Familia si hay violencia intrafamiliar. Las comisar√≠as ofrecen protecci√≥n inmediata, √≥rdenes de restricci√≥n, acompa√±amiento psicol√≥gico y legal, y programas de reeducaci√≥n para agresores. El proceso es confidencial y gratuito.',
                'Busca apoyo psicol√≥gico en centros de salud mental. Los centros de salud mental p√∫blicos ofrecen terapia individual y grupal gratuita, grupos de apoyo para v√≠ctimas de violencia, y programas de rehabilitaci√≥n. Tambi√©n brindan medicamentos subsidiados cuando es necesario.'
            ],
            'Deficiente acceso a salud': [
                'Af√≠liate al sistema de salud (EPS) m√°s cercano a tu domicilio. La afiliaci√≥n es gratuita para personas de bajos recursos y cubre consultas m√©dicas, medicamentos, ex√°menes de laboratorio, hospitalizaci√≥n y cirug√≠as. Incluye tambi√©n atenci√≥n de urgencias 24 horas y programas de prevenci√≥n.',
                'Acude a centros de salud p√∫blicos para atenci√≥n primaria. Los centros de salud p√∫blicos ofrecen consultas m√©dicas generales, control prenatal, vacunaci√≥n, planificaci√≥n familiar, y programas de prevenci√≥n de enfermedades cr√≥nicas. La atenci√≥n es gratuita y de calidad.',
                'Participa en brigadas de salud comunitaria. Las brigadas m√©dicas visitan barrios y veredas ofreciendo consultas m√©dicas, odontol√≥gicas, toma de presi√≥n arterial, ex√°menes de diabetes, y entrega de medicamentos. Son especialmente importantes en zonas rurales y de dif√≠cil acceso.',
                'Solicita citas m√©dicas prioritarias si tienes condiciones especiales. Las personas con discapacidad, enfermedades cr√≥nicas, embarazadas, o adultos mayores tienen derecho a citas prioritarias y atenci√≥n preferencial. Tambi√©n pueden acceder a programas especiales de seguimiento y medicamentos subsidiados.'
            ],
            'Problemas ambientales': [
                '√önete a comit√©s ambientales de tu barrio o vereda. Los comit√©s ambientales organizan campa√±as de limpieza, reforestaci√≥n, reciclaje, y educaci√≥n ambiental. Tambi√©n gestionan proyectos comunitarios para mejorar la calidad del aire, agua y suelo, y pueden acceder a recursos municipales para implementar soluciones.',
                'Participa en jornadas de limpieza y reciclaje comunitario. Estas jornadas no solo mejoran el entorno inmediato, sino que crean conciencia ambiental, generan empleo temporal, y pueden convertirse en proyectos sostenibles de econom√≠a circular. Tambi√©n fortalecen la cohesi√≥n social.',
                'Reporta problemas ambientales a la autoridad ambiental. La Corporaci√≥n Aut√≥noma Regional (CAR) y las autoridades ambientales municipales tienen la obligaci√≥n de investigar y sancionar actividades que contaminen el ambiente. Los reportes pueden hacerse de forma an√≥nima y son investigados de manera prioritaria.',
                'Implementa pr√°cticas de manejo de residuos en tu hogar. La separaci√≥n de residuos, compostaje dom√©stico, reutilizaci√≥n de materiales, y reducci√≥n del consumo no solo benefician el ambiente, sino que pueden generar ahorros econ√≥micos. Estas pr√°cticas pueden extenderse a toda la comunidad.'
            ],
            'Bajo acceso a educaci√≥n': [
                'Inscr√≠bete en programas de alfabetizaci√≥n para adultos. Los programas de alfabetizaci√≥n son gratuitos y flexibles, adapt√°ndose a horarios laborales. Incluyen lectura, escritura, matem√°ticas b√°sicas, y uso de tecnolog√≠a. Al completar el programa se obtiene certificaci√≥n oficial que mejora las oportunidades laborales.',
                'Busca becas educativas en tu alcald√≠a o gobernaci√≥n. Las entidades territoriales ofrecen becas para educaci√≥n b√°sica, media, t√©cnica y universitaria. Las becas cubren matr√≠cula, materiales, transporte y alimentaci√≥n. Tambi√©n existen becas especiales para mujeres, v√≠ctimas del conflicto, y personas con discapacidad.',
                'Participa en programas de educaci√≥n virtual gratuita. Plataformas como "Aprende en Casa" del gobierno, cursos del SENA virtual, y programas de universidades p√∫blicas ofrecen educaci√≥n de calidad sin costo. Incluyen desde educaci√≥n b√°sica hasta cursos de posgrado, con certificaci√≥n oficial.',
                'Considera la educaci√≥n t√©cnica del SENA. El SENA ofrece programas t√©cnicos de 1-2 a√±os en √°reas de alta demanda laboral como tecnolog√≠a, salud, agroindustria, y servicios. Los programas incluyen pr√°ctica laboral, certificaci√≥n internacional, y alta probabilidad de empleo inmediato.'
            ],
            'Conflictos familiares o comunitarios': [
                'Acude a mediaci√≥n familiar en la Comisar√≠a de Familia. La mediaci√≥n familiar es un proceso gratuito y confidencial donde un profesional neutral ayuda a resolver conflictos sin necesidad de procesos judiciales. Es especialmente efectiva para problemas de custodia, pensiones alimentarias, y violencia intrafamiliar.',
                'Participa en talleres de resoluci√≥n de conflictos. Estos talleres ense√±an t√©cnicas de comunicaci√≥n asertiva, negociaci√≥n, y manejo de emociones. Son especialmente √∫tiles para resolver conflictos vecinales, laborales, y familiares. Incluyen ejercicios pr√°cticos y seguimiento personalizado.',
                'Busca apoyo psicol√≥gico familiar. Los centros de salud mental ofrecen terapia familiar gratuita que ayuda a identificar patrones de conflicto, mejorar la comunicaci√≥n, y fortalecer los v√≠nculos familiares. Tambi√©n incluyen grupos de apoyo para familias en crisis.',
                '√önete a grupos de apoyo comunitario. Los grupos de apoyo ofrecen un espacio seguro para compartir experiencias, recibir orientaci√≥n de pares, y desarrollar estrategias colectivas para resolver problemas comunitarios. Tambi√©n facilitan el acceso a recursos y servicios especializados.'
            ],
            'Pocas oportunidades para j√≥venes y mujeres': [
                'Participa en programas de liderazgo juvenil. Los programas de liderazgo juvenil desarrollan habilidades de comunicaci√≥n, trabajo en equipo, y gesti√≥n de proyectos. Incluyen mentor√≠as con l√≠deres comunitarios, oportunidades de representaci√≥n pol√≠tica, y acceso a redes de contactos profesionales.',
                'Inscr√≠bete en cursos de emprendimiento femenino. Los cursos de emprendimiento femenino ofrecen capacitaci√≥n en plan de negocios, marketing, finanzas, y tecnolog√≠a. Incluyen mentor√≠as con empresarias exitosas, acceso a capital semilla, y participaci√≥n en ferias de emprendimiento exclusivas para mujeres.',
                '√önete a redes de mujeres emprendedoras. Las redes de mujeres emprendedoras ofrecen apoyo mutuo, intercambio de experiencias, acceso a oportunidades de negocio, y mentor√≠as entre pares. Tambi√©n facilitan el acceso a cr√©ditos especiales, ferias comerciales, y programas de internacionalizaci√≥n.',
                'Busca mentor√≠as profesionales. Las mentor√≠as profesionales conectan a j√≥venes y mujeres con profesionales experimentados que ofrecen orientaci√≥n en desarrollo de carrera, habilidades t√©cnicas, y networking. Incluyen acompa√±amiento personalizado, acceso a oportunidades laborales, y desarrollo de competencias espec√≠ficas.'
            ]
        };
        
        return problemRecommendations[problem] || [];
    }

    // Recomendaciones econ√≥micas
    getEconomicRecommendations(economicImpact) {
        if (economicImpact.includes('cr√≠tica')) {
            return [
                'Solicita ayuda econ√≥mica de emergencia en tu alcald√≠a',
                'Inscr√≠bete en programas de transferencias monetarias condicionadas',
                'Busca apoyo alimentario en bancos de alimentos',
                'Acude a la Defensor√≠a del Pueblo para orientaci√≥n legal'
            ];
        } else if (economicImpact.includes('inestabilidad')) {
            return [
                'Diversifica tus fuentes de ingreso con trabajos adicionales',
                'Aprende habilidades digitales para trabajos remotos',
                'Considera la econom√≠a colaborativa (delivery, transporte)',
                'Busca microcr√©ditos para peque√±os negocios'
            ];
        } else {
            return [
                'Mant√©n un fondo de emergencia equivalente a 3 meses de gastos',
                'Diversifica tus inversiones y fuentes de ingreso',
                'Participa en programas de educaci√≥n financiera'
            ];
        }
    }

    // Recomendaciones sociales
    getSocialRecommendations(socialImpact) {
        if (socialImpact.includes('disposici√≥n')) {
            return [
                '√önete a organizaciones comunitarias de tu barrio',
                'Participa en actividades culturales y deportivas locales',
                'Ofrece tu tiempo como voluntario en causas sociales',
                'Organiza eventos comunitarios para fortalecer v√≠nculos'
            ];
        } else if (socialImpact.includes('resistencia')) {
            return [
                'Comienza con actividades sociales de bajo compromiso',
                'Participa en grupos de inter√©s com√∫n (hobbies, deportes)',
                'Busca apoyo psicol√≥gico para superar barreras sociales',
                '√önete a grupos de apoyo mutuo'
            ];
        } else {
            return [
                'Mant√©n contacto regular con familiares y amigos',
                'Participa en actividades sociales de tu comunidad',
                'Ofrece ayuda a vecinos y conocidos'
            ];
        }
    }

    // Recomendaciones de salud
    getHealthRecommendations(healthImpact) {
        if (healthImpact.includes('cr√≠tica') || healthImpact.includes('deficiente')) {
            return [
                'Acude inmediatamente a centros de salud de urgencias',
                'Solicita citas m√©dicas prioritarias en tu EPS',
                'Participa en brigadas de salud comunitaria',
                'Busca apoyo en organizaciones de salud mental'
            ];
        } else if (healthImpact.includes('condici√≥n especial')) {
            return [
                'Inscr√≠bete en programas de atenci√≥n diferencial',
                'Busca redes de apoyo para personas con condiciones similares',
                'Solicita ayudas t√©cnicas y medicamentos subsidiados',
                'Participa en grupos de apoyo familiar'
            ];
        } else {
            return [
                'Mant√©n controles m√©dicos regulares',
                'Participa en programas de prevenci√≥n en salud',
                'Practica h√°bitos de vida saludable'
            ];
        }
    }

    // Recomendaciones educativas
    getEducationalRecommendations(educationalImpact) {
        if (educationalImpact.includes('bajo nivel')) {
            return [
                'Inscr√≠bete en programas de alfabetizaci√≥n para adultos',
                'Busca clases de refuerzo en matem√°ticas y lenguaje',
                'Participa en programas de educaci√≥n virtual gratuita',
                'Considera la educaci√≥n t√©cnica del SENA'
            ];
        } else if (educationalImpact.includes('inter√©s en capacitaci√≥n')) {
            return [
                'Explora cursos t√©cnicos del SENA en tu √°rea de inter√©s',
                'Busca becas para educaci√≥n superior',
                'Participa en programas de formaci√≥n para el trabajo',
                'Considera educaci√≥n virtual y a distancia'
            ];
        } else {
            return [
                'Mant√©n actualizaci√≥n continua en tu √°rea profesional',
                'Participa en cursos de desarrollo personal',
                'Busca oportunidades de educaci√≥n continua'
            ];
        }
    }

    // Recomendaciones basadas en nivel de vulnerabilidad
    getLevelBasedRecommendations(vulnerabilityLevel) {
        const levelRecommendations = {
            'critica': [
                'Contacta inmediatamente servicios sociales de emergencia',
                'Solicita ayuda urgente en la alcald√≠a o gobernaci√≥n',
                'Acude a la Defensor√≠a del Pueblo para orientaci√≥n legal',
                'Busca apoyo en organizaciones de ayuda humanitaria'
            ],
            'alta': [
                'Solicita cita prioritaria con trabajador social',
                'Inscr√≠bete en programas de apoyo integral',
                'Busca acompa√±amiento psicosocial especializado',
                'Participa en programas de intervenci√≥n temprana'
            ],
            'media': [
                'Acude a orientaci√≥n en servicios sociales locales',
                'Participa en programas de desarrollo comunitario',
                'Busca apoyo en organizaciones no gubernamentales',
                'Mant√©n seguimiento regular con profesionales'
            ],
            'baja': [
                'Mant√©n las buenas pr√°cticas actuales',
                'Participa en programas de prevenci√≥n',
                'Ayuda a otros en tu comunidad',
                'Contin√∫a con tu desarrollo personal'
            ]
        };
        
        return levelRecommendations[vulnerabilityLevel] || levelRecommendations['baja'];
    }

    // Respaldo: generar recomendaciones extensas directamente de las respuestas
    generateFallbackRecommendations() {
        const recs = [];

        // Situaci√≥n laboral e ingresos (q4, q5)
        const q4 = this.answers?.q4;
        const q5 = this.answers?.q5;
        if (q4 === 'desempleado' || q5 === 'no') {
            recs.push(
                'Inscr√≠bete en el Servicio P√∫blico de Empleo para acceder a ofertas laborales. Este servicio gratuito del gobierno conecta a las personas con empleadores y ofrece orientaci√≥n laboral personalizada, incluyendo talleres de hoja de vida y preparaci√≥n para entrevistas.',
                'Participa en programas de capacitaci√≥n t√©cnica del SENA. El SENA ofrece programas gratuitos con pr√°ctica laboral y certificaci√≥n oficial que mejoran significativamente tus oportunidades de empleo.',
                'Solicita apoyo econ√≥mico de emergencia y acceso a bancos de alimentos en tu alcald√≠a mientras estabilizas tu situaci√≥n laboral.'
            );
        }

        // Problem√°ticas seleccionadas (q2)
        const problems = this.answers?.q2 || [];
        if (Array.isArray(problems)) {
            if (problems.includes('falta_empleo')) {
                recs.push('Explora oportunidades de emprendimiento con apoyo de C√°mara de Comercio, incluyendo asesor√≠a legal, contable y acceso a microcr√©ditos.');
            }
            if (problems.includes('inseguridad')) {
                recs.push('√önete a redes vecinales de seguridad y participa en programas de convivencia ciudadana para fortalecer la prevenci√≥n del delito.');
            }
            if (problems.includes('salud')) {
                recs.push('Af√≠liate o actualiza tu afiliaci√≥n a una EPS y acude a centros de salud p√∫blicos para atenci√≥n primaria y programas de prevenci√≥n.');
            }
            if (problems.includes('educacion')) {
                recs.push('Inscr√≠bete en programas de alfabetizaci√≥n o educaci√≥n b√°sica y busca becas en tu alcald√≠a o gobernaci√≥n.');
            }
            if (problems.includes('ambientales')) {
                recs.push('Participa en comit√©s ambientales locales y reporta afectaciones a la autoridad ambiental para activar rutas de intervenci√≥n.');
            }
            if (problems.includes('conflictos')) {
                recs.push('Acude a mediaci√≥n en la Comisar√≠a de Familia y participa en talleres de resoluci√≥n de conflictos para fortalecer habilidades de di√°logo.');
            }
        }

        // Acceso a salud (q7) y condici√≥n especial (q6)
        const q7 = this.answers?.q7;
        const q6 = this.answers?.q6;
        if (q7 === 'deficiente' || q7 === 'inexistente') {
            recs.push('Participa en brigadas de salud comunitaria; muchos municipios realizan jornadas peri√≥dicas con atenci√≥n m√©dica y odontol√≥gica gratuita.');
        }
        if (q6 === 'si') {
            recs.push('Solicita atenci√≥n diferencial para condiciones especiales, incluyendo ayudas t√©cnicas, medicamentos subsidiados y acompa√±amiento psicosocial.');
        }

        // Participaci√≥n social (q10)
        const q10 = this.answers?.q10;
        if (q10 === 'no') {
            recs.push('Comienza con actividades comunitarias de bajo compromiso (deporte, cultura o voluntariado) para ampliar tu red de apoyo y acceso a oportunidades.');
        }

        // Nivel educativo (q8)
        const q8 = this.answers?.q8;
        if (q8 === 'ninguno' || q8 === 'primaria') {
            recs.push('Accede a educaci√≥n formal o flexible y considera formaci√≥n t√©cnica del SENA para mejorar tu empleabilidad en el corto plazo.');
        }

        // Asegurar un m√≠nimo de recomendaciones extensas
        if (recs.length < 4) {
            recs.push(
                'Mant√©n un fondo de emergencia y realiza un plan de gastos b√°sico; participa en talleres de educaci√≥n financiera en tu comunidad.',
                'Construye y mant√©n redes de apoyo con familiares y vecinos; una red activa mejora el acceso a oportunidades y soporte emocional.'
            );
        }

        // Limitar y deduplicar
        return [...new Set(recs)].slice(0, 6);
    }

    // Generar diagn√≥stico b√°sico cuando no hay datos completos
    generateBasicDiagnosis() {
        const totalScore = this.calculateBasicScore();
        console.log('Puntuaci√≥n b√°sica:', totalScore);
        
        let nivel = 'baja';
        let recomendaciones = ['Mantenimiento de programas preventivos'];
        
        if (totalScore >= 40) {
            nivel = 'critica';
            recomendaciones = ['Atenci√≥n de emergencia', 'Intervenci√≥n multisectorial'];
        } else if (totalScore >= 30) {
            nivel = 'alta';
            recomendaciones = ['Intervenci√≥n integral urgente', 'Apoyo econ√≥mico inmediato'];
        } else if (totalScore >= 20) {
            nivel = 'media';
            recomendaciones = ['Programas de apoyo focalizado', 'Intervenci√≥n temprana'];
        }
        
        return {
            escenario: `Vulnerabilidad Social ${nivel}`,
            diagnostico: `Vulnerabilidad social ${nivel}`,
            descripcion: `Puntuaci√≥n total: ${totalScore}. Vulnerabilidad social ${nivel}`,
            prioridad: nivel.toUpperCase(),
            recomendaciones: recomendaciones,
            seguimiento: nivel === 'critica' ? 'Semanal' : nivel === 'alta' ? 'Quincenal' : 'Mensual',
            puntuacion: totalScore
        };
    }

    // Calcular puntuaci√≥n b√°sica
    calculateBasicScore() {
        let score = 0;
        
        // Sistema de puntuaci√≥n simple basado en respuestas
        Object.keys(this.answers).forEach(question => {
            const answer = this.answers[question];
            
            if (Array.isArray(answer)) {
                // Para checkboxes, sumar puntos
                score += answer.length * 2;
            } else {
                // Para radio buttons, asignar puntos seg√∫n la respuesta
                const points = this.getBasicPoints(question, answer);
                score += points;
            }
        });
        
        return score;
    }

    // Obtener puntos b√°sicos por respuesta
    getBasicPoints(question, answer) {
        // Sistema de puntuaci√≥n simple
        const highRiskAnswers = ['desempleado', 'no', 'deficiente', 'inexistente', 'ninguno', 'primaria', 'mucho'];
        const mediumRiskAnswers = ['trabajador_independiente', 'parcialmente', 'regular', 'secundaria', 'poco'];
        
        if (highRiskAnswers.includes(answer)) return 5;
        if (mediumRiskAnswers.includes(answer)) return 3;
        return 1;
    }

    // Verificar si las respuestas coinciden con un escenario
    matchesScenario(scenario) {
        if (!scenario || !scenario.condiciones) return false;
        
        const conditions = scenario.condiciones;
        
        if (!conditions || typeof conditions !== 'object') return false;
        
        for (const [conditionKey, expectedValues] of Object.entries(conditions)) {
            const questionId = this.getQuestionIdByType(conditionKey);
            const answer = this.answers[questionId];
            
            if (!answer) return false;
            
            if (Array.isArray(expectedValues)) {
                if (Array.isArray(answer)) {
                    // Para checkboxes, verificar si alguna respuesta coincide
                    if (!expectedValues.some(val => answer.includes(val))) {
                        return false;
                    }
                } else {
                    // Para radio buttons, verificar si la respuesta est√° en los valores esperados
                    if (!expectedValues.includes(answer)) {
                        return false;
                    }
                }
            }
        }
        
        return true;
    }

    // Generar diagn√≥stico por puntuaci√≥n
    generateDiagnosisByScore(score) {
        const niveles = this.diagnosticoData.diagnostico_social.niveles_vulnerabilidad;
        
        let nivel = 'baja';
        if (score >= 46) nivel = 'critica';
        else if (score >= 31) nivel = 'alta';
        else if (score >= 16) nivel = 'media';
        
        const nivelData = niveles[nivel];
        
        return {
            escenario: `Vulnerabilidad Social ${nivelData.descripcion}`,
            diagnostico: nivelData.descripcion,
            descripcion: `Puntuaci√≥n total: ${score}. ${nivelData.descripcion}`,
            prioridad: nivel.toUpperCase(),
            recomendaciones: nivelData.recomendaciones,
            seguimiento: nivel === 'critica' ? 'Semanal' : nivel === 'alta' ? 'Quincenal' : 'Mensual',
            puntuacion: score
        };
    }

    // Obtener recomendaciones usando el nuevo sistema
    getRecommendations() {
        const diagnosis = this.generateSpecificDiagnosis();
        return diagnosis ? diagnosis.recomendaciones : ["Consulta con un especialista"];
    }

    // Generar diagn√≥stico con IA usando OpenAI
    async generateAIDiagnosis() {
        try {
            const userName = localStorage.getItem('userName') || 'Usuario';
            
            // Preparar las respuestas para enviar a la IA
            const answersText = this.formatAnswersForAI();
            
            const prompt = `Eres un asistente especializado en diagn√≥stico social automatizado. Recibes respuestas de un formulario donde las personas contestan preguntas sobre su entorno familiar, econ√≥mico, emocional y social.

Analiza las respuestas y genera un diagn√≥stico social claro y emp√°tico.

El diagn√≥stico debe identificar la problem√°tica principal (por ejemplo: vulnerabilidad econ√≥mica, violencia intrafamiliar, exclusi√≥n laboral, abandono escolar, etc.), y explicar brevemente las causas seg√∫n las respuestas.

Si es posible, ofrece una breve recomendaci√≥n general o mensaje de apoyo.

Muestra el resultado en formato texto, iniciando con un saludo personalizado:

'Querido/a ${userName}, seg√∫n el an√°lisis de tus respuestas, tu diagn√≥stico social es‚Ä¶'

Evita usar lenguaje t√©cnico complejo. S√© emp√°tico, claro y profesional.

Respuestas del usuario:
${answersText}`;

            const API_KEY = 'TU_CLAVE_API_AQUI';
            
            console.log('Enviando petici√≥n a OpenAI...');
            console.log('API Key configurada:', API_KEY ? 'S√ç' : 'NO');
            console.log('Header Authorization:', `Bearer ${API_KEY}`);
            
            const response = await fetch('https://api.openai.com/v1/chat/completions', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${API_KEY}`
                },
                body: JSON.stringify({
                    model: 'gpt-3.5-turbo',
                    messages: [
                        {
                            role: 'system',
                            content: 'Eres un especialista en diagn√≥stico social con experiencia en an√°lisis de vulnerabilidades sociales.'
                        },
                        {
                            role: 'user',
                            content: prompt
                        }
                    ],
                    max_tokens: 500,
                    temperature: 0.7
                })
            });

            console.log('Respuesta recibida:', response.status);
            
            if (!response.ok) {
                const errorData = await response.json();
                console.error('Error de la API:', errorData);
                throw new Error(`Error en la API: ${response.status} - ${JSON.stringify(errorData)}`);
            }

            const data = await response.json();
            console.log('Datos de respuesta:', data);
            return data.choices[0].message.content;

        } catch (error) {
            console.error('Error generando diagn√≥stico con IA:', error);
            // Retornar diagn√≥stico de fallback si la API falla
            return this.generateFallbackDiagnosis();
        }
    }

    // Formatear respuestas para enviar a la IA
    formatAnswersForAI() {
        const questionMapping = {
            'q1': 'Tipo de comunidad',
            'q2': 'Problem√°ticas identificadas',
            'q3': 'Afectaci√≥n personal',
            'q4': 'Situaci√≥n laboral',
            'q5': 'Ingresos del hogar',
            'q6': 'Condici√≥n especial',
            'q7': 'Acceso a salud',
            'q8': 'Nivel educativo',
            'q9': 'Tipo de ayuda necesaria',
            'q10': 'Disposici√≥n a participar'
        };

        let formattedAnswers = '';
        
        Object.keys(this.answers).forEach(question => {
            const answer = this.answers[question];
            const questionText = questionMapping[question] || question;
            
            if (Array.isArray(answer)) {
                formattedAnswers += `${questionText}: ${answer.join(', ')}\n`;
            } else {
                formattedAnswers += `${questionText}: ${answer}\n`;
            }
        });

        return formattedAnswers;
    }

    // Generar diagn√≥stico de fallback si la API falla
    generateFallbackDiagnosis() {
        const userName = localStorage.getItem('userName') || 'Usuario';
        
        if (!this.diagnosticoData) {
            return `Querido/a ${userName}, se ha completado tu diagn√≥stico social. Los resultados se est√°n procesando...`;
        }
        
        // Calcular puntuaci√≥n total
        const totalScore = this.calculateGeneralScore();
        const categoryScores = this.getCategoriesData();
        
        // Determinar nivel de vulnerabilidad
        const vulnerabilityLevel = this.getVulnerabilityLevel(totalScore);
        const specificDiagnosis = this.getSpecificDiagnosis();
        
        let diagnosisText = `Querido/a ${userName}, seg√∫n el an√°lisis de tus respuestas, `;
        
        // Diagn√≥stico espec√≠fico si existe
        if (specificDiagnosis) {
            diagnosisText += specificDiagnosis.mensaje;
            return diagnosisText; // Retornar el mensaje espec√≠fico completo
        } else {
            diagnosisText += `tu nivel de vulnerabilidad es ${vulnerabilityLevel.nombre.toLowerCase()}. `;
        }
        
        // An√°lisis por categor√≠as
        let topCategories = [];
        if (categoryScores && typeof categoryScores === 'object') {
            topCategories = Object.entries(categoryScores)
                .sort(([,a], [,b]) => b - a)
                .slice(0, 3);
        }
        
        if (topCategories.length > 0) {
            diagnosisText += `Las √°reas que requieren mayor atenci√≥n son: `;
            topCategories.forEach(([category, score], index) => {
                const categoryInfo = this.diagnosticoData.categorias[category];
                if (categoryInfo && score > 0) {
                    diagnosisText += `${categoryInfo.nombre}${index < topCategories.length - 1 ? ', ' : '. '}`;
                }
            });
        }
        
        // Recomendaciones
        diagnosisText += `\n\nRecomendaciones espec√≠ficas:\n`;
        if (specificDiagnosis && specificDiagnosis.recomendaciones) {
            specificDiagnosis.recomendaciones.forEach((rec, index) => {
                diagnosisText += `${index + 1}. ${rec}\n`;
            });
        } else {
            vulnerabilityLevel.recomendaciones.forEach((rec, index) => {
                diagnosisText += `${index + 1}. ${rec}\n`;
            });
        }
        
        // Mensaje de apoyo
        diagnosisText += `\n\nRecuerda que cada paso que tomes hacia la mejora de tu situaci√≥n es valioso. Te recomendamos buscar apoyo en programas locales de desarrollo social.`;
        
        console.log('Diagn√≥stico generado:', diagnosisText);
        return diagnosisText;
    }

    // Generar an√°lisis detallado de las respuestas
    generateDetailedAnalysis() {
        const analysis = {
            primaryIssue: '',
            specificProblems: [],
            economicImpact: '',
            socialImpact: '',
            educationalImpact: '',
            healthImpact: '',
            specificRecommendations: []
        };

        console.log('Generando an√°lisis detallado para respuestas:', this.answers);

        // Analizar problem√°ticas identificadas (q2)
        const problems = this.answers.q2;
        if (Array.isArray(problems) && problems.length > 0) {
            analysis.specificProblems = problems.map(problem => {
                const problemNames = {
                    'falta_empleo': 'Falta de empleo o ingresos estables',
                    'inseguridad': 'Inseguridad y violencia',
                    'salud': 'Deficiente acceso a salud',
                    'ambientales': 'Problemas ambientales',
                    'educacion': 'Bajo acceso a educaci√≥n',
                    'conflictos': 'Conflictos familiares o comunitarios',
                    'oportunidades': 'Pocas oportunidades para j√≥venes y mujeres'
                };
                return problemNames[problem] || problem.replace(/_/g, ' ');
            });
            console.log('Problem√°ticas identificadas:', analysis.specificProblems);
        }

        // Determinar problema principal basado en las respuestas espec√≠ficas
        if (problems && problems.includes('falta_empleo')) {
            analysis.primaryIssue = 'vulnerabilidad econ√≥mica severa';
        } else if (problems && problems.includes('inseguridad')) {
            analysis.primaryIssue = 'vulnerabilidad por inseguridad';
        } else if (problems && problems.includes('salud')) {
            analysis.primaryIssue = 'vulnerabilidad en salud';
        } else if (problems && problems.includes('educacion')) {
            analysis.primaryIssue = 'vulnerabilidad educativa';
        } else if (problems && problems.includes('ambientales')) {
            analysis.primaryIssue = 'vulnerabilidad ambiental';
        } else if (problems && problems.includes('conflictos')) {
            analysis.primaryIssue = 'vulnerabilidad social por conflictos';
        } else if (problems && problems.includes('oportunidades')) {
            analysis.primaryIssue = 'vulnerabilidad por falta de oportunidades';
        } else {
            analysis.primaryIssue = 'vulnerabilidad social m√∫ltiple';
        }

        // An√°lisis econ√≥mico
        const laborSituation = this.answers.q4;
        const incomeSituation = this.answers.q5;
        
        if (laborSituation === 'desempleado' && incomeSituation === 'no') {
            analysis.economicImpact = 'se presenta una situaci√≥n econ√≥mica cr√≠tica con desempleo y ingresos insuficientes para cubrir necesidades b√°sicas';
            analysis.specificRecommendations.push('Buscar programas de empleo y apoyo econ√≥mico inmediato');
        } else if (laborSituation === 'trabajador_independiente' && incomeSituation === 'parcialmente') {
            analysis.economicImpact = 'existe inestabilidad econ√≥mica con ingresos parciales que requieren fortalecimiento';
            analysis.specificRecommendations.push('Explorar opciones de capacitaci√≥n y formalizaci√≥n laboral');
        } else if (incomeSituation === 'no') {
            analysis.economicImpact = 'los ingresos no cubren las necesidades b√°sicas, requiriendo apoyo econ√≥mico';
            analysis.specificRecommendations.push('Acceder a programas de apoyo econ√≥mico y alimentario');
        }

        // An√°lisis social
        const communityType = this.answers.q1;
        const participation = this.answers.q10;
        
        if (communityType === 'rural' && participation === 'si') {
            analysis.socialImpact = 'existe disposici√≥n para participar en procesos comunitarios, lo cual es una fortaleza para el desarrollo social';
            analysis.specificRecommendations.push('Participar activamente en programas comunitarios de desarrollo');
        } else if (participation === 'no') {
            analysis.socialImpact = 'se identifica resistencia a la participaci√≥n social, lo cual puede limitar el acceso a oportunidades';
            analysis.specificRecommendations.push('Considerar participar en actividades comunitarias para acceder a m√°s oportunidades');
        }

        // An√°lisis educativo
        const educationLevel = this.answers.q8;
        const helpNeeded = this.answers.q9;
        
        if (educationLevel === 'ninguno' || educationLevel === 'primaria') {
            analysis.educationalImpact = 'se identifica un bajo nivel educativo que puede limitar las oportunidades laborales';
            analysis.specificRecommendations.push('Acceder a programas de alfabetizaci√≥n y educaci√≥n b√°sica');
        } else if (educationLevel === 'secundaria' && helpNeeded === 'capacitacion') {
            analysis.educationalImpact = 'existe inter√©s en capacitaci√≥n, lo cual es positivo para el desarrollo personal';
            analysis.specificRecommendations.push('Buscar programas de capacitaci√≥n t√©cnica y profesional');
        }

        // An√°lisis de salud
        const healthAccess = this.answers.q7;
        const specialCondition = this.answers.q6;
        
        if (healthAccess === 'deficiente' || healthAccess === 'inexistente') {
            analysis.healthImpact = 'se presenta un acceso deficiente a servicios de salud, lo cual es una vulnerabilidad cr√≠tica';
            analysis.specificRecommendations.push('Buscar atenci√≥n en centros de salud p√∫blicos y programas de salud comunitaria');
        }
        
        if (specialCondition === 'si') {
            analysis.healthImpact += ' Adem√°s, se identifica una condici√≥n especial en el hogar que requiere atenci√≥n espec√≠fica';
            analysis.specificRecommendations.push('Acceder a programas especializados para personas con condiciones especiales');
        }

        // An√°lisis de afectaci√≥n personal
        const personalAffection = this.answers.q3;
        if (personalAffection === 'mucho') {
            analysis.specificRecommendations.push('Buscar apoyo psicol√≥gico y emocional para manejar el impacto personal de las problem√°ticas');
        }

        return analysis;
    }
    
    // Obtener nivel de vulnerabilidad basado en puntuaci√≥n
    getVulnerabilityLevel(totalScore) {
        if (!this.diagnosticoData || !this.diagnosticoData.niveles_vulnerabilidad) {
            console.log('No hay datos de niveles de vulnerabilidad, usando niveles por defecto');
            return this.getDefaultVulnerabilityLevel(totalScore);
        }
        
        const levels = this.diagnosticoData.niveles_vulnerabilidad;
        
        if (!levels || typeof levels !== 'object') {
            console.log('Los niveles de vulnerabilidad no son v√°lidos, usando niveles por defecto');
            return this.getDefaultVulnerabilityLevel(totalScore);
        }
        
        for (const [key, level] of Object.entries(levels)) {
            if (level && level.puntos_min !== undefined && level.puntos_max !== undefined) {
                if (totalScore >= level.puntos_min && totalScore <= level.puntos_max) {
                    return level;
                }
            }
        }
        
        // Fallback a nivel cr√≠tico si no se encuentra coincidencia
        return levels.critica || this.getDefaultVulnerabilityLevel(totalScore);
    }

    // Obtener nivel de vulnerabilidad por defecto
    getDefaultVulnerabilityLevel(totalScore) {
        const defaultLevels = {
            baja: { nombre: 'Vulnerabilidad Baja', descripcion: 'Tu situaci√≥n presenta riesgos m√≠nimos', recomendaciones: ['Mant√©n tu situaci√≥n actual', 'Busca oportunidades de crecimiento'] },
            media: { nombre: 'Vulnerabilidad Media', descripcion: 'Presentas algunos riesgos que requieren atenci√≥n', recomendaciones: ['Busca apoyo en programas sociales', 'Mejora tus habilidades'] },
            alta: { nombre: 'Vulnerabilidad Alta', descripcion: 'Tu situaci√≥n requiere atenci√≥n inmediata', recomendaciones: ['Busca ayuda profesional', 'Accede a programas de apoyo'] },
            critica: { nombre: 'Vulnerabilidad Cr√≠tica', descripcion: 'Tu situaci√≥n requiere intervenci√≥n urgente', recomendaciones: ['Busca ayuda inmediata', 'Contacta servicios sociales'] }
        };

        if (totalScore >= 21) return defaultLevels.critica;
        if (totalScore >= 13) return defaultLevels.alta;
        if (totalScore >= 6) return defaultLevels.media;
        return defaultLevels.baja;
    }
    
    // Obtener diagn√≥stico espec√≠fico basado en condiciones
    getSpecificDiagnosis() {
        if (!this.diagnosticoData) return null;
        
        const specificDiagnoses = this.diagnosticoData.diagnosticos_especificos;
        
        for (const diagnosis of specificDiagnoses) {
            if (this.matchesDiagnosisConditions(diagnosis.condicion)) {
                return diagnosis;
            }
        }
        
        return null;
    }
    
    // Verificar si las respuestas coinciden con las condiciones de un diagn√≥stico
    matchesDiagnosisConditions(condition) {
        // Verificar comunidad
        if (condition.comunidad) {
            const userCommunity = this.answers.q1;
            if (userCommunity !== condition.comunidad) {
                return false;
            }
        }
        
        // Verificar problemas
        if (condition.problemas) {
            const userProblems = this.answers.q2 || [];
            const hasMatchingProblems = condition.problemas.some(problem => 
                userProblems.includes(problem)
            );
            if (!hasMatchingProblems) {
                return false;
            }
        }
        
        // Verificar situaci√≥n laboral
        if (condition.laboral) {
            const userLabor = this.answers.q4;
            if (userLabor !== condition.laboral) {
                return false;
            }
        }
        
        // Verificar impacto personal
        if (condition.impacto) {
            const userImpact = this.answers.q3;
            if (userImpact !== condition.impacto) {
                return false;
            }
        }
        
        // Verificar servicios de salud
        if (condition.servicios_salud) {
            const userHealth = this.answers.q7;
            if (userHealth !== condition.servicios_salud) {
                return false;
            }
        }
        
        // Verificar nivel educativo
        if (condition.educacion) {
            const userEducation = this.answers.q8;
            if (userEducation !== condition.educacion) {
                return false;
            }
        }
        
        // Verificar condici√≥n especial en el hogar
        if (condition.condicion_hogar) {
            const userCondition = this.answers.q6;
            if (userCondition !== condition.condicion_hogar) {
                return false;
            }
        }
        
        return true;
    }

    // Calcular categor√≠as basadas en las respuestas reales usando el JSON
    calculateCategoriesFromAnswers() {
        console.log('üîç Calculando categor√≠as desde respuestas:', this.answers);
        
        const categories = {
            'Econ√≥mica': 0,
            'Social': 0,
            'Salud': 0,
            'Educativa': 0,
            'Ambiental': 0
        };

        // Usar los datos del JSON para calcular categor√≠as
        if (this.diagnosticoData && this.diagnosticoData.preguntas) {
            for (let i = 1; i <= this.totalQuestions; i++) {
                const questionId = `q${i}`;
                const answer = this.answers[questionId];
                const question = this.diagnosticoData.preguntas.find(q => q.id === questionId);
                
                if (question && answer) {
                    console.log(`Procesando categor√≠as para ${questionId}:`, answer);
                    
                    if (question.tipo === 'checkbox' && Array.isArray(answer)) {
                        // Para checkboxes, sumar puntos de todas las opciones seleccionadas
                        answer.forEach(val => {
                            const option = question.opciones.find(opt => opt.valor === val);
                            if (option && option.categoria) {
                                const categoryName = this.getCategoryDisplayName(option.categoria);
                                if (categories.hasOwnProperty(categoryName)) {
                                    categories[categoryName] += option.puntos;
                                    console.log(`  - ${val} (${option.categoria}): +${option.puntos} puntos`);
                                }
                            }
                        });
                    } else if (question.tipo === 'radio') {
                        // Para radio buttons, obtener puntos de la opci√≥n seleccionada
                        const option = question.opciones.find(opt => opt.valor === answer);
                        if (option && option.categoria) {
                            const categoryName = this.getCategoryDisplayName(option.categoria);
                            if (categories.hasOwnProperty(categoryName)) {
                                categories[categoryName] += option.puntos;
                                console.log(`  - ${answer} (${option.categoria}): +${option.puntos} puntos`);
                            }
                        }
                    }
                }
            }
        } else {
            console.log('No hay datos de diagn√≥stico, usando c√°lculo b√°sico de categor√≠as');
            // Fallback al c√°lculo b√°sico si no hay datos del JSON
            return this.calculateBasicCategories();
        }

        // Limitar puntuaciones a m√°ximo 25
        Object.keys(categories).forEach(key => {
            categories[key] = Math.min(categories[key], 25);
        });

        console.log('‚úÖ Categor√≠as calculadas:', categories);
        return categories;
    }

    // Obtener nombre de categor√≠a para mostrar
    getCategoryDisplayName(categoryKey) {
        const categoryMap = {
            'economica': 'Econ√≥mica',
            'social': 'Social',
            'salud': 'Salud',
            'educativa': 'Educativa',
            'ambiental': 'Ambiental'
        };
        return categoryMap[categoryKey] || categoryKey;
    }

    // C√°lculo b√°sico de categor√≠as como fallback
    calculateBasicCategories() {
        const categories = {
            'Econ√≥mica': 0,
            'Social': 0,
            'Salud': 0,
            'Educativa': 0,
            'Ambiental': 0
        };

        // C√°lculo b√°sico basado en respuestas espec√≠ficas
        Object.keys(this.answers).forEach(question => {
            const answer = this.answers[question];
            
            if (Array.isArray(answer)) {
                // Para checkboxes, sumar puntos b√°sicos
                answer.forEach(val => {
                    if (val.includes('empleo') || val.includes('economico')) {
                        categories['Econ√≥mica'] += 2;
                    } else if (val.includes('social') || val.includes('conflictos')) {
                        categories['Social'] += 2;
                    } else if (val.includes('salud')) {
                        categories['Salud'] += 2;
                    } else if (val.includes('educacion')) {
                        categories['Educativa'] += 2;
                    } else if (val.includes('ambiental')) {
                        categories['Ambiental'] += 2;
                    }
                });
            } else {
                // Para radio buttons, asignar puntos b√°sicos
                if (question === 'q4' && answer === 'desempleado') {
                    categories['Econ√≥mica'] += 3;
                } else if (question === 'q5' && answer === 'no') {
                    categories['Econ√≥mica'] += 2;
                } else if (question === 'q7' && (answer === 'deficiente' || answer === 'inexistente')) {
                    categories['Salud'] += 3;
                } else if (question === 'q8' && (answer === 'ninguno' || answer === 'primaria')) {
                    categories['Educativa'] += 2;
                }
            }
        });

        return categories;
    }

    // Generar texto de diagn√≥stico espec√≠fico
    generateSpecificDiagnosisText() {
        const userName = localStorage.getItem('userName') || 'Usuario';
        let diagnosis = `Querido/a ${userName}, seg√∫n el an√°lisis detallado de tus respuestas, tu diagn√≥stico social indica: `;
        
        // Analizar respuestas espec√≠ficas
        const problems = this.answers.q2 || [];
        const impact = this.answers.q3;
        const labor = this.answers.q4;
        const income = this.answers.q5;
        const health = this.answers.q7;
        const education = this.answers.q8;
        const community = this.answers.q1;
        
        let hasSpecificIssues = false;
        let vulnerabilityAreas = [];
        
        // Diagn√≥stico basado en problemas identificados
        if (problems.includes('falta_empleo')) {
            diagnosis += `Se identifica una vulnerabilidad econ√≥mica alta debido a la falta de empleo. `;
            vulnerabilityAreas.push('econ√≥mica');
            hasSpecificIssues = true;
        }
        
        if (problems.includes('acceso_salud')) {
            diagnosis += `Existe una vulnerabilidad en salud por el deficiente acceso a servicios m√©dicos. `;
            vulnerabilityAreas.push('salud');
            hasSpecificIssues = true;
        }
        
        if (problems.includes('problemas_ambientales')) {
            diagnosis += `Se detectan problemas ambientales que afectan la calidad de vida. `;
            vulnerabilityAreas.push('ambiental');
            hasSpecificIssues = true;
        }
        
        if (problems.includes('acceso_educacion')) {
            diagnosis += `Se observa una vulnerabilidad educativa que limita las oportunidades. `;
            vulnerabilityAreas.push('educativa');
            hasSpecificIssues = true;
        }
        
        if (problems.includes('inseguridad')) {
            diagnosis += `Se percibe inseguridad que genera vulnerabilidad social. `;
            vulnerabilityAreas.push('social');
            hasSpecificIssues = true;
        }
        
        // Diagn√≥stico basado en situaci√≥n laboral
        if (labor === 'desempleado') {
            diagnosis += `Tu situaci√≥n de desempleo genera una vulnerabilidad econ√≥mica cr√≠tica. `;
            vulnerabilityAreas.push('econ√≥mica');
            hasSpecificIssues = true;
        } else if (labor === 'trabajador_independiente') {
            diagnosis += `Tu trabajo independiente presenta inestabilidad econ√≥mica. `;
            vulnerabilityAreas.push('econ√≥mica');
            hasSpecificIssues = true;
        }
        
        // Diagn√≥stico basado en ingresos
        if (income === 'no') {
            diagnosis += `Los ingresos insuficientes generan vulnerabilidad econ√≥mica severa. `;
            vulnerabilityAreas.push('econ√≥mica');
            hasSpecificIssues = true;
        } else if (income === 'parcialmente') {
            diagnosis += `Los ingresos parciales generan vulnerabilidad econ√≥mica moderada. `;
            vulnerabilityAreas.push('econ√≥mica');
            hasSpecificIssues = true;
        }
        
        // Diagn√≥stico basado en salud
        if (health === 'deficiente' || health === 'inexistente') {
            diagnosis += `El acceso limitado a servicios de salud genera vulnerabilidad sanitaria. `;
            vulnerabilityAreas.push('salud');
            hasSpecificIssues = true;
        }
        
        // Diagn√≥stico basado en educaci√≥n
        if (education === 'ninguno' || education === 'primaria') {
            diagnosis += `El bajo nivel educativo genera vulnerabilidad educativa y laboral. `;
            vulnerabilityAreas.push('educativa');
            hasSpecificIssues = true;
        }
        
        // Complementar con categor√≠as calculadas (asegura incluir top 1-2 √°reas con mayor puntaje)
        try {
            const categories = this.calculateCategoriesFromAnswers();
            const mappedNames = { economica: 'econ√≥mica', salud: 'salud', educativa: 'educativa', social: 'social', ambiental: 'ambiental' };
            const sorted = Object.entries(categories || {})
                .sort((a, b) => (b[1] || 0) - (a[1] || 0))
                .slice(0, 2);
            sorted.forEach(([key, val]) => {
                const pretty = mappedNames[key];
                if (val > 0 && pretty && !vulnerabilityAreas.includes(pretty)) {
                    vulnerabilityAreas.push(pretty);
                    hasSpecificIssues = true;
                }
            });
        } catch (_) {}

        // Impacto personal y recomendaciones espec√≠ficas
        if (impact === 'mucho') {
            diagnosis += `Estas vulnerabilidades te afectan significativamente en tu vida diaria. `;
        } else if (impact === 'poco') {
            diagnosis += `Estas vulnerabilidades te afectan moderadamente. `;
        }
        
        // Recomendaciones espec√≠ficas basadas en vulnerabilidades
        if (vulnerabilityAreas.length > 0) {
            const areas = [...vulnerabilityAreas];
            let areasText = '';
            if (areas.length === 1) {
                areasText = areas[0];
            } else if (areas.length === 2) {
                areasText = `${areas[0]} y ${areas[1]}`;
            } else {
                areasText = `${areas.slice(0, -1).join(', ')} y ${areas[areas.length - 1]}`;
            }
            diagnosis += `Se recomienda atenci√≥n prioritaria en las √°reas de: ${areasText}. `;
        }
        
        if (!hasSpecificIssues) {
            diagnosis += `Tu situaci√≥n social presenta caracter√≠sticas estables con oportunidades de mejora. `;
        }
        
        diagnosis += `El an√°lisis muestra que requieres apoyo espec√≠fico en las √°reas identificadas.`;
        
        return diagnosis;
    }
}

// Exportar para uso global
window.DiagnosticForm = DiagnosticForm;
